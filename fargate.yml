---
AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys the core network infrastructure and IAM resources
             to be used for a service hosted in Amazon ECS using AWS Fargate.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/19'
    PublicTwo:
      CIDR: '10.0.32.0/19'
    PublicThree:
      CIDR: '10.0.64.0/19'
    PrivateOne:
      CIDR: '10.0.96.0/19'
    PrivateTwo:
      CIDR: '10.0.128.0/19'
    PrivateThree:
      CIDR: '10.0.160.0/19'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-internet-gateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'VPCInternetGateway'
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-one
  PublicSubnetOneRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-one-route-table
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicSubnetOneRouteTable'
      SubnetId: !Ref 'PublicSubnetOne'
  PublicSubnetOneDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetOneRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'VPCInternetGateway'
    DependsOn: 'VPCGatewayAttachment'
  PublicSubnetOneEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-one-eip
  PublicSubnetOneNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetOneEIP.AllocationId
      SubnetId: !Ref 'PublicSubnetOne'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-one-natgateway
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-two
  PublicSubnetTwoRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-two-route-table
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicSubnetTwoRouteTable'
      SubnetId: !Ref 'PublicSubnetTwo'
  PublicSubnetTwoDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetTwoRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'VPCInternetGateway'
    DependsOn: 'VPCGatewayAttachment'
  PublicSubnetTwoEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-two-eip
  PublicSubnetTwoNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetTwoEIP.AllocationId
      SubnetId: !Ref 'PublicSubnetTwo'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-two-natgateway
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-three
  PublicSubnetThreeRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-three-route-table
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicSubnetThreeRouteTable'
      SubnetId: !Ref 'PublicSubnetThree'
  PublicSubnetThreeDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetThreeRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'VPCInternetGateway'
    DependsOn: 'VPCGatewayAttachment'
  PublicSubnetThreeEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-three-eip
  PublicSubnetThreeNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnetThreeEIP.AllocationId
      SubnetId: !Ref 'PublicSubnetThree'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-fargate-vpc-public-subnet-three-natgateway
